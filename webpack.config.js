'use strict'

const BUILD_DIR = 'build'
const CWD = process.cwd()
const ENV = process.env.NODE_ENV || 'development'
const PRODUCTION = ENV === 'production'

const fs = require('fs')
const path = require('path')
const src = path.resolve(CWD, 'src')
const webpack = require('webpack')
const WebpackCleanPlugin = require('clean-webpack-plugin')
const WebpackCopyPlugin = require('copy-webpack-plugin')
const WebpackExtractTextPlugin = require('extract-text-webpack-plugin')
const WebpackHTMLPlugin = require('html-webpack-plugin')
const WebpackStatsWriterPlugin = require('webpack-stats-plugin').StatsWriterPlugin
const WebpackZipPlugin = require('zip-webpack-plugin')

const QEXT = JSON.parse(fs.readFileSync('./qlik/template.qext'))
const ZIP_FILE = `${QEXT.name}.zip`

const EXCLUDE = [
  /^\..*/,
  /\.zip/,
  /content\//,
  /resources\//
]

const fileLoader = (extras) => `file?limit=1000&name=[name].[ext]${extras || ''}`

let config = {
  context: src,
  cache: false,
  entry: {
    [`${QEXT.name}.css`]: './scss/app',
    [`${QEXT.name}.js`]: './js/app'
  },
  output: {
    name: QEXT.name,
    filename: '[name]',
    publicPath: '',
    path: path.resolve(CWD, BUILD_DIR),
    libraryTarget: 'amd'
  },
  devtool: 'inline-source-map',
  module: {
    loaders: [{
      test: /\.(ttf|eot|woff2?)/,
      loader: fileLoader()
    }, {
      test: /\.(jpg|png|gif|svg)/,
      loader: fileLoader('!img?progressive=true')
    }, {
      test: /\.pug$/,
      loader: 'pug',
      query: {
        pretty: !PRODUCTION
      }
    }, {
      test: /\.json$/,
      loader: 'json'
    }, {
      test: /\.js?$/,
      exclude: [
        /node_modules/
      ],
      loader: 'babel?compact=false'
    }, {
      test: /\.css$/,
      loader: WebpackExtractTextPlugin.extract('style', 'css')
    }, {
      test: /\.scss$/,
      loader: WebpackExtractTextPlugin.extract('style', 'css!sass')
    }]
  },
  resolve: {
    extensions: ['', '.js', '.json', '.scss', '.css', '.pug', '.jpg', '.png', '.gif', '.svg'],
    alias: {
      img: `${src}/img/`,
      pug: `${src}/pug/`
    }
  },
  externals: [
    'angular',
    'jquery',
    'js/qlik'
  ],
  plugins: [
    new WebpackCleanPlugin([BUILD_DIR]),
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify(ENV),
      'QEXT': JSON.stringify(QEXT)
    }),
    new webpack.optimize.OccurenceOrderPlugin(),
    new webpack.NoErrorsPlugin(),
    new WebpackExtractTextPlugin('[name]'),
    new WebpackHTMLPlugin({
      inject: false,
      hash: true,
      filename: `${QEXT.name}.html`,
      template: 'pug/index',
      minify: false,
      title: QEXT.name,
      production: PRODUCTION,
      app: {
        css: `${QEXT.name}.css`,
        js: `${QEXT.name}.js`
      }
    }),
    new WebpackCopyPlugin([{
      from: '../qlik/template.qext',
      to: `${QEXT.name}.qext`
    }, {
      from: '../qlik/preview.png'
    }])
  ]
}

if (PRODUCTION) {
  config.plugins.push(
    new webpack.optimize.UglifyJsPlugin({
      compress: {
        warnings: false
      }
    })
  )

  config.devtool = null
} else {
  config.plugins.push(
    new WebpackCopyPlugin([{
      from: '../qlik/qlik-styles.css',
      to: 'resources/css/qlik-styles.css'
    }, {
      from: '../qlik/qlikui.css',
      to: 'resources/css/qlikui.css'
    }, {
      from: '../qlik/client.css',
      to: 'resources/css/client.css'
    }, {
      from: '../qlik/theme.css',
      to: 'resources/themes/old/sense/theme.css'
    }, {
      from: '../qlik/qlik.js',
      to: 'resources/js/qlik.js'
    }, {
      from: '../qlik/require.js',
      to: 'resources/assets/external/requirejs/require.js'
    }, {
      from: '../qlik/OpenLayers.js',
      to: 'resources/assets/external/openlayers/OpenLayers.js'
    }, {
      from: '../qlik/product-info.js',
      to: 'resources/autogenerated/product-info.js'
    }, {
      from: '../qlik/common.js',
      to: 'resources/translate/en-US/common.js'
    }, {
      from: '../qlik/client.js',
      to: 'resources/translate/en-US/client.js'
    }, {
      from: '../node_modules/jquery/dist/jquery.js',
      to: 'resources/jquery.js'
    }])
  )
}

config.plugins.push(
  new WebpackCopyPlugin([{
    from: '../qlik/template.qext',
    to: `${QEXT.name}.qext`
  }, {
    from: '../qlik/preview.png'
  }, {
    from: '../qlik/workbench.js',
    to: `${QEXT.name}.js`
  }]),
  new WebpackStatsWriterPlugin({
    filename: 'wbfolder.wbl',
    fields: null,
    transform: (stats, opts) =>
      stats
        .assets
        .filter(({ name }) => !EXCLUDE.some((regex) => regex.test(name)))
        .map(({ name }) => name).join(';\n')
  })
)

if (PRODUCTION) {
  config.plugins.push(
    new WebpackZipPlugin({
      filename: ZIP_FILE,
      pathPrefix: QEXT.name,
      EXCLUDE
    })
  )
}

module.exports = config
